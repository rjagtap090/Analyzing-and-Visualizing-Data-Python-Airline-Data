Flight Data Analysis Project
This project involves analyzing flight data using various data visualization techniques. Below is a detailed explanation of the project and the steps involved:
Project Overview
The primary goal of this project is to analyze flight data to extract meaningful insights and visualize various aspects of the data. The project includes reading the data, performing exploratory data analysis (EDA), and visualizing different features of the dataset.
Steps Involved:
1. Loading the Dataset:
- The dataset is loaded from a CSV file named flights_data.csv.
2. Initial Data Exploration:
- Display the shape and first few rows of the dataset to understand its structure and content.
```python
flights = pd.read_csv('/content/flights_data.csv')
print(flights.shape)
flights.head()
```
3. Visualizing the Number of Flights by Source:
- Use a count plot to visualize the number of flights originating from different sources.
```python
sb.countplot(data=flights, x='Source')
plt.ylabel('Number of Flights', fontsize=12)
plt.xlabel('Source', fontsize=12)
```

4. Ordered Visualization by Source:
- Visualize the count of flights by source in a specific order based on the frequency.
```python
gen_order = flights['Source'].value_counts().index
sb.countplot(data=flights, x='Source', order=gen_order)
```
5. Visualizing the Number of Flights by Airline:
- Use a count plot to visualize the number of flights for each airline.
```python
sb.countplot(data=flights, x='Airline')
plt.xticks(rotation=90)
```
6. Handling Missing Values:
- Check for missing values in the dataset and visualize the count of missing values for each feature.
```python
na_counts = flights.isna().sum()
sb.barplot(na_counts.index.values, na_counts)
plt.xticks(rotation=90)
plt.ylabel('Number of missing values', fontsize=12)
```
7. Visualizing Flight Destinations:
- Use a pie chart to visualize the distribution of flight destinations.
```python
sorted_counts = flights['Destination'].value_counts()
plt.pie(sorted_counts, labels=sorted_counts.index, startangle=90, counterclock=False)
plt.axis('square')
plt.title("Flight Destination's")
```
8. Visualizing Flight Duration:
- Use a histogram to visualize the distribution of flight durations.
```python
plt.hist(data=flights, x='Duration(minutes)')
```
9. Visualizing Flight Prices:
- Use a histogram and a distplot to visualize the distribution of flight prices.
```python
plt.hist(data=flights, x='Price', bins=20)
sb.distplot(flights['Price'])
sb.distplot(flights['Price'], kde=False)
```
10. Advanced Histogram Visualization:
- Create a histogram with specific bin edges for a more detailed visualization of flight prices.
```python
bin_edges = np.arange(0, flights['Price'].max() + 1, 1200)
sb.distplot(flights['Price'], bins=bin_edges, kde=False, hist_kws={'alpha': 1})
```
How to Use the Code
1. Install Required Libraries:
- Ensure that you have the necessary libraries installed: numpy, pandas, matplotlib, and seaborn.
```bash
pip install numpy pandas matplotlib seaborn
```
2. Run the Analysis:
- Load the dataset and execute each step sequentially to visualize the data and gain insights.
3. Customize Visualizations:
- Modify the visualizations as needed to better suit your analysis or presentation requirements.


